{"version":3,"sources":["redux/reducers/todo/todo.js","redux/reducers/todo/index.js","redux/reducers/rootReducer.js","redux/storeConfig/store.js","task.jsx","colorPicker.js","redux/actions/todo/index.js","column.jsx","menu.js","todo.js","index.js"],"names":["initialState","todos","tasks","todo","state","action","type","order2","combineReducers","rootReducer","todoApp","todoReducer","middlewares","thunk","createDebounce","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","Container","styled","div","props","color","Task","draggableId","this","task","_id","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","isDragging","name","React","Component","Button","button","background","ColorPicker","colors","map","onClick","e","onChangeComplete","apiURI","getTodos","dispatch","a","axios","get","then","result","data","catch","err","console","log","changeColumns","column","put","addNewColumn","post","response","Title","h3","Title2","TaskList","Item","Submit","Column","activeId","collum","Fragment","Dialog","isShown","title","onCloseComplete","setState","hasFooter","TextInput","onChange","target","value","appearance","intent","marginLeft","style","float","cursor","droppableId","isDropDisabled","droppableProps","isDraggingOver","key","placeholder","connect","Components","Inputs","Styles","boxShadow","Menu","taskIsShown","columnIsShown","owner","status","desk","comboBoxItems","collums","label","id","Combobox","width","items","itemToString","item","selected","Textarea","addNewTask","disabled","triangle","hex","Todo","onDragEnd","destination","source","sourceColumn","find","p","destColumn","sourceItems","destItems","splice","removed","patchColumns","copiedItems","newColumnOrder","Array","from","newTodos","0","patchColumn","app","length","Pane","display","margin","minHeight","overflow","direction","columnId","deleteColumn","delete","deleteTask","order","patch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAAMA,EAAe,CACnBC,MAAO,GACPC,MAAO,IAyEMC,EAtEF,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAC7C,OAAQA,EAAOC,MACb,IAAK,YACH,OAAO,2BAAKF,GAAZ,IAAmBH,MAAOI,EAAOJ,QACnC,IAAK,WAEL,IAAK,aAEL,IAAK,gBAEL,IAAK,cACH,OAAO,eAAKG,GACd,IAAK,eACH,OAAO,2BAAKA,GAAZ,IAAmBH,MAAOI,EAAOE,SACnC,IAAK,iBACH,OAAO,eAAKH,GAkDd,QACE,OAAOA,ICpEEI,cAAgB,CAC7BL,SCGaM,EAJKD,YAAgB,CAClCE,QAASC,ICCLC,EAAc,CAACC,IAAOC,OAEtBC,EAAmBC,OAAOC,sCAAwCC,IAClEC,EAAQC,YACZX,EACA,GACAM,EAAiBM,IAAe,WAAf,EAAmBT,K,8ZCRtC,IAAMU,EAAYC,IAAOC,IAAV,KAQS,SAAAC,GAAK,OACjBA,EAAMC,MACFD,EAAMC,MACN,WAGKC,E,uKACP,IAAD,OAGL,OACI,kBAAC,IAAD,CACIC,YAAaC,KAAKJ,MAAMK,KAAKC,IAC7BC,MAAOH,KAAKJ,MAAMO,QAEjB,SAACC,EAAUC,GAAX,OACG,kBAACZ,EAAD,iBACQW,EAASE,eACTF,EAASG,gBAFjB,CAGIV,MAAO,EAAKD,MAAMK,KAAKJ,MACvBW,IAAKJ,EAASK,SACdC,WAAYL,EAASK,aAEpB,EAAKd,MAAMK,KAAKU,a,GAjBPC,IAAMC,W,6PCdxC,IAAMC,EAASpB,IAAOqB,OAAV,KAGI,SAACnB,GAAD,OAAYA,EAAMoB,WAAapB,EAAMoB,WAAa,WAIlD,SAACpB,GAAD,OACZA,EAAMoB,aAAepB,EAAMC,MAAQ,cAAgBD,EAAMC,MAAQ,UA+BtDoB,E,4MA3Bb1C,MAAQ,CACN2C,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,Y,uDAGM,IAAD,OACP,OAAOlB,KAAKzB,MAAM2C,OAAOC,KAAI,SAACtB,GAAD,OAC3B,kBAAC,EAAD,CACEA,MAAO,EAAKD,MAAMC,MAClBmB,WAAYnB,EACZuB,QAAS,SAACC,GACR,EAAKzB,MAAM0B,iBAAiBzB,a,GArBZgB,a,iBCbpBU,EAAS,4CACFC,EAAW,WACtB,8CAAO,WAAOC,GAAP,SAAAC,EAAA,sEACCC,IACHC,IADG,UACIL,EADJ,UAEHM,MAAK,SAACC,GACLL,EAAS,CACPhD,KAAM,YACNL,MAAO0D,EAAOC,UAGjBC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MATzB,2CAAP,uDAoCWG,EAAgB,SAACC,GAC5B,8CAAO,WAAOZ,GAAP,SAAAC,EAAA,sEACCC,IACHW,IAAI,oDAAqDD,GACzDR,MAAK,WACJJ,EAASD,QAEVQ,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MANzB,2CAAP,uDAmBWM,EAAe,SAACF,GAC3B,OAAO,SAACZ,GACNE,IAAMa,KAAN,UAAcjB,EAAd,YAAgCc,GAAQR,MAAK,SAACY,GAC5ChB,EAAS,CAAEhD,KAAM,aAAc4D,WAC/BZ,EAASD,U,06BCpDf,IAAM/B,GAAYC,IAAOC,IAAV,KAWT+C,GAAQhD,IAAOiD,GAAV,KAILC,GAASlD,IAAOC,IAAV,KAINkD,GAAWnD,IAAOC,IAAV,KAIU,SAAAC,GAAK,OAAKA,EAAMC,MAAQD,EAAMC,MAAO,WAKvDiD,GAAOpD,IAAOC,IAAV,KAGJoD,GAASrD,IAAOC,IAAV,KASLqD,G,4MACHzE,MAAM,CACF0E,SAAS,KACTC,OAAO,CAACvC,KAAK,GAAGd,MAAM,GAAIK,IAAI,K,uDAExB,IAAD,OACL,OACI,kBAAC,IAAMiD,SAAP,KACI,kBAACC,EAAA,EAAD,CACIC,QAASrD,KAAKzB,MAAM0E,WAAajD,KAAKJ,MAAMyC,OAAOnC,IACnDoD,MAAM,cACNC,gBAAiB,kBAAM,EAAKC,SAAS,CAAEP,SAAU,QACjDQ,WAAW,GAEX,kBAACX,GAAD,KACI,kBAACF,GAAD,aACA,kBAACc,EAAA,EAAD,CACIC,SAAU,SAACtC,GAAD,OACN,EAAKmC,SAAS,CACVN,OAAO,2BAAM,EAAK3E,MAAM2E,QAAlB,IAA0BvC,KAAMU,EAAEuC,OAAOC,WAGvDA,MAAO7D,KAAKzB,MAAM2E,OAAOvC,QAGjC,kBAACmC,GAAD,KACI,kBAACF,GAAD,cACA,kBAAC,EAAD,CACI/C,MAAOG,KAAKzB,MAAM2E,OAAOrD,MACzByB,iBAAkB,SAACzB,GAAD,OACd,EAAK2D,SAAS,CACVN,OAAO,2BAAM,EAAK3E,MAAM2E,QAAlB,IAA0BrD,MAAOA,UAKvD,kBAACkD,GAAD,KACI,kBAACjC,EAAA,EAAD,CACIgD,WAAW,UACXC,OAAO,SACP3C,QAAS,WACL,EAAKxB,MAAMwC,cAAc,EAAK7D,MAAM2E,QACpC,EAAKM,SAAS,CACVP,SAAU,KACVC,OAAQ,OAPpB,UAaA,kBAACpC,EAAA,EAAD,CACIkD,WAAY,GACZF,WAAW,UACXC,OAAO,UACP3C,QAAS,WACL,EAAKxB,MAAMwC,cAAc,EAAK7D,MAAM2E,QACpC,EAAKM,SAAS,CACVP,SAAU,KACVC,OAAQ,OARpB,UAiBZ,kBAAC,IAAD,CACInD,YAAaC,KAAKJ,MAAMyC,OAAOnC,IAC/BC,MAAOH,KAAKJ,MAAMO,QAEjB,SAACC,GAAD,OACG,kBAAC,GAAD,iBACQA,EAASE,eADjB,CAEIE,IAAKJ,EAASK,WAEd,kBAACiC,GAAUtC,EAASG,gBACf,EAAKX,MAAMyC,OAAO1B,KACnB,kBAAC,IAAD,CACIsD,MAAO,CAACC,MAAM,SACdC,OAAQ,UACRH,WAAY,MACZ5C,QAAS,kBAAM,EAAKoC,SAAS,CACzBP,SAAU,EAAKrD,MAAMyC,OAAOnC,IAC5BgD,OAAO,CACHhD,IAAI,EAAKN,MAAMyC,OAAOnC,IACtBS,KAAK,EAAKf,MAAMyC,OAAO1B,KACvBd,MAAM,EAAKD,MAAMyC,OAAOxC,aAMxC,kBAAC,IAAD,CACIuE,YAAa,EAAKxE,MAAMyC,OAAOnC,IAC/BmE,eAAgB,EAAKzE,MAAMyE,eAC3B5F,KAAK,SAEJ,SAAC2B,EAAUC,GAAX,OACG,kBAACwC,GAAD,eACIrC,IAAKJ,EAASK,UACVL,EAASkE,eAFjB,CAGIC,eAAgBlE,EAASkE,eACzB1E,MAAO,EAAKD,MAAMyC,OAAOxC,QAExB,EAAKD,MAAMyC,OAAOhE,MAAM8C,KAAI,SAAClB,EAAME,GAAP,OAC7B,kBAAC,EAAD,CACIqE,IAAKvE,EAAKC,IACVD,KAAMA,EACNE,MAAOA,OAIVC,EAASqE,yB,GAjHxB7D,IAAMC,WA4Hb6D,eAAQ,KAAK,CAACtC,iBAAdsC,CAA8B1B,I,ojBCvK7C,IAAM2B,GAAajF,IAAOC,IAAV,MAKVmD,GAAOpD,IAAOC,IAAV,MAGJoD,GAASrD,IAAOC,IAAV,MAIN+C,GAAQhD,IAAOC,IAAV,MAILiF,GAASlF,IAAOC,IAAV,MAKNkF,GAAS,CACbC,UAAW,QAGPC,G,4MACJxG,MAAQ,CACNyG,aAAa,EACbC,eAAe,EACfhF,KAAM,CAAEiF,MAAO,GAAIvE,KAAM,GAAId,MAAO,UAAWsF,QAAQ,EAAOC,KAAM,IACpElC,OAAQ,CAAEvC,KAAM,GAAId,MAAO,Y,uDAGnB,IAAD,OACDwF,EAAgBrF,KAAKJ,MAAMxB,MAAM,GAAGkH,QAAQnE,KAAI,SAACkB,GAAD,MAAa,CACjEkD,MAAOlD,EAAO1B,KACd6E,GAAInD,EAAOnC,QAEb,OACE,kBAACyE,GAAD,KACE,kBAACvB,EAAA,EAAD,CACEC,QAASrD,KAAKzB,MAAMyG,YACpB1B,MAAM,eACNC,gBAAiB,kBAAM,EAAKC,SAAS,CAAEwB,aAAa,KACpDvB,WAAW,GAEX,kBAACmB,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,eACA,kBAACa,GAAA,EAAD,CACExB,MAAOY,GACPa,MAAO,OACPC,MAAON,EACPO,aAAc,SAACC,GAAD,OAAWA,EAAOA,EAAKN,MAAQ,IAC7C5B,SAAU,SAACmC,GAAD,OACR,EAAKtC,SAAS,CACZvD,KAAK,2BAAM,EAAK1B,MAAM0B,MAAlB,IAAwBiF,MAAOY,EAASN,QAGhDf,YAAa,uBAGjB,kBAAC,GAAD,KACE,kBAAC,GAAD,aACA,kBAACf,EAAA,EAAD,CACEgC,MAAO,OACP/B,SAAU,SAACtC,GAAD,OACR,EAAKmC,SAAS,CACZvD,KAAK,2BAAM,EAAK1B,MAAM0B,MAAlB,IAAwBU,KAAMU,EAAEuC,OAAOC,WAG/CA,MAAO7D,KAAKzB,MAAM0B,KAAKU,KACvB8D,YAAa,0BAInB,kBAAC,GAAD,KACE,kBAAC,GAAD,cACA,kBAAC,EAAD,CACE5E,MAAOG,KAAKzB,MAAM0B,KAAKJ,MACvByB,iBAAkB,SAACzB,GAAD,OAChB,EAAK2D,SAAS,CACZvD,KAAK,2BAAM,EAAK1B,MAAM0B,MAAlB,IAAwBJ,MAAOA,UAK3C,kBAAC,GAAD,KACE,kBAAC,GAAD,oBACA,kBAACkG,GAAA,EAAD,CACEpC,SAAU,SAACtC,GAAD,OACR,EAAKmC,SAAS,CACZvD,KAAK,2BAAM,EAAK1B,MAAM0B,MAAlB,IAAwBmF,KAAM/D,EAAEuC,OAAOC,WAG/CA,MAAO7D,KAAKzB,MAAM0B,KAAKmF,KACvBX,YAAY,gCAIhB,kBAAC,GAAD,KACE,kBAAC3D,EAAA,EAAD,CACEM,QAAS,WACP,EAAKxB,MAAMoG,WAAW,EAAKzH,MAAM0B,MACjC,EAAKuD,SAAS,CACZwB,aAAa,EACb/E,KAAM,CAAEJ,MAAO,UAAWsF,QAAQ,MAGtCc,SAC4B,KAA1BjG,KAAKzB,MAAM0B,KAAKiF,OAA0C,OAA1BlF,KAAKzB,MAAM0B,KAAKiF,OATpD,YAiBJ,kBAAC9B,EAAA,EAAD,CACEC,QAASrD,KAAKzB,MAAM0G,cACpB3B,MAAM,iBACNC,gBAAiB,kBAAM,EAAKC,SAAS,CAAEyB,eAAe,KACtDxB,WAAW,GAEX,kBAAC,GAAD,KACE,kBAAC,GAAD,aACA,kBAACC,EAAA,EAAD,CACEC,SAAU,SAACtC,GAAD,OACR,EAAKmC,SAAS,CACZN,OAAO,2BAAM,EAAK3E,MAAM2E,QAAlB,IAA0BvC,KAAMU,EAAEuC,OAAOC,WAGnDA,MAAO7D,KAAKzB,MAAM2E,OAAOvC,KACzB8D,YAAa,2BAGjB,kBAAC,GAAD,KACE,kBAAC,GAAD,cACA,kBAAC,gBAAD,CACE5E,MAAOG,KAAKzB,MAAM2E,OAAOrD,MACzBqG,SAAU,OACV5E,iBAAkB,SAACzB,GAAD,OAChB,EAAK2D,SAAS,CACZN,OAAO,2BAAM,EAAK3E,MAAM2E,QAAlB,IAA0BrD,MAAOA,EAAMsG,YAKrD,kBAAC,GAAD,KACE,kBAACrF,EAAA,EAAD,CACEM,QAAS,WACP,EAAKxB,MAAM2C,aAAa,EAAKhE,MAAM2E,QACnC,EAAKM,SAAS,CAAEyB,eAAe,MAHnC,YAWJ,kBAACnE,EAAA,EAAD,CAAQM,QAAS,kBAAM,EAAKoC,SAAS,CAAEwB,aAAa,MAApD,YAGA,kBAAClE,EAAA,EAAD,CACEkD,WAAY,MACZ5C,QAAS,kBAAM,EAAKoC,SAAS,CAAEyB,eAAe,MAFhD,mB,GA1IWpE,aAqJJ6D,eAAQ,KAAM,CAAEsB,WFpIL,SAAC/F,GACzB,OAAO,SAACwB,GACNE,IAAMa,KAAN,UAAcjB,EAAd,UAA8BtB,GAAM4B,MAAK,SAACY,GACxChB,EAAS,CAAEhD,KAAM,WAAYwB,SAC7BwB,EAASD,UEgI4Be,gBAA5BmC,CAA4CK,I,qGCpK3D,IAAMtF,GAAYC,IAAOC,IAAV,MAITyG,G,4MAWJ7H,MAAQ,CACNH,MAAO,M,EAUTiI,UAAY,SAACvE,GAAY,IACfwE,EAA8BxE,EAA9BwE,YAAaC,EAAiBzE,EAAjByE,OAAQ9H,EAASqD,EAATrD,KAC7B,GAAK6H,IAGHA,EAAYlC,cAAgBmC,EAAOnC,aACnCkC,EAAYnG,QAAUoG,EAAOpG,OAK/B,GAAa,WAAT1B,EAeJ,GAAI8H,EAAOnC,cAAgBkC,EAAYlC,YAAa,CAClD,IAAMoC,EAAe,EAAKjI,MAAMH,MAAM,GAAGkH,QAAQmB,MAC/C,SAACC,GAAD,OAAOA,EAAExG,MAAQqG,EAAOnC,eAEpBuC,EAAa,EAAKpI,MAAMH,MAAM,GAAGkH,QAAQmB,MAC7C,SAACC,GAAD,OAAOA,EAAExG,MAAQoG,EAAYlC,eAEzBwC,EAAcJ,EAAanI,MAC3BwI,EAAYF,EAAWtI,MARqB,EAShCuI,EAAYE,OAAOP,EAAOpG,MAAO,GAA5C4G,EAT2C,oBAUlDF,EAAUC,OAAOR,EAAYnG,MAAO,EAAG4G,GAEvC,EAAKnH,MAAMoH,aAAa,CACtBR,eACAG,mBAEG,CACL,IAAMtE,EAAS,EAAK9D,MAAMH,MAAM,GAAGkH,QAAQmB,MACzC,SAACC,GAAD,OAAOA,EAAExG,MAAQqG,EAAOnC,eAEpB6C,EAAc5E,EAAOhE,MAJtB,EAKa4I,EAAYH,OAAOP,EAAOpG,MAAO,GAA5C4G,EALF,oBAMLE,EAAYH,OAAOR,EAAYnG,MAAO,EAAG4G,GAEzC,EAAKnH,MAAMwC,cAAcC,OAvC3B,CACE,IAAM6E,EAAiBC,MAAMC,KAAK,EAAK7I,MAAMH,MAAM,GAAGkH,SACtD4B,EAAeJ,OAAOP,EAAOpG,MAAO,GACpC+G,EAAeJ,OACbR,EAAYnG,MACZ,EACA,EAAK5B,MAAMH,MAAM,GAAGkH,QAAQiB,EAAOpG,QAErC,IAAMkH,EAAW,CACfC,EAAE,2BAAM,EAAK/I,MAAMH,OAAnB,IAA0BkH,QAAS4B,KAErC,EAAKtH,MAAM2H,YAAYL,EAAgBG,K,4LA5BnCrH,KAAKJ,MAAM4B,W,OACjBxB,KAAKwD,SAAS,CACZpF,MAAO4B,KAAKJ,MAAM4H,IAAIlJ,KAAKF,Q,qIA0DrB,IAAD,OACP,OAA4B,OAArB4B,KAAKzB,MAAMH,OAA8C,IAA5B4B,KAAKzB,MAAMH,MAAMqJ,OACnD,kBAAC,IAAMtE,SAAP,KACE,kBAAC,GAAD,CAAM/E,MAAO4B,KAAKzB,MAAMH,QACxB,kBAACsJ,GAAA,EAAD,CACEC,QAAQ,OACRC,OAAQ,MACRC,UAAW,OACXnC,MAAO,WACPoC,SAAU,QAEV,kBAAC,IAAD,CACEzB,UAAWrG,KAAKqG,WAGhB,kBAAC,IAAD,CACEjC,YAAY,cACZ2D,UAAU,aACVtJ,KAAK,WAEJ,SAAC2B,GAAD,OACC,kBAAC,GAAD,eAAWI,IAAKJ,EAASK,UAAcL,EAASkE,gBAC7C,EAAK/F,MAAMH,MAAM,GAAGkH,QAAQnE,KAAI,SAAC6G,EAAU7H,GAC1C,IAAMkC,EAAS2F,EACf,OACE,kBAAC,GAAD,CACExD,IAAKnC,EAAOnC,IACZmC,OAAQA,EACRhE,MAAOgE,EAAOhE,MACd8B,MAAOA,OAIZC,EAASqE,mBAOpB,Q,gDAnH0B7E,EAAOrB,GACrC,OAAIqB,EAAM4H,IAAIlJ,KAAKF,QAAUG,EAAMH,MAC1B,CACLA,MAAOwB,EAAM4H,IAAIlJ,KAAKF,OAKnB,S,GATQwC,IAAMC,WA4HV6D,gBALS,SAACnG,GACvB,MAAO,CACLiJ,IAAKjJ,EAAMM,WAGyB,CACtC2C,WACAe,eACA0F,aHrE0B,SAACzC,GAC3B,OAAO,SAAC/D,GACNE,IACGuG,OADH,UACa3G,EADb,YAC+B,CAC3BQ,KAAM,CAAEyD,GAAIA,KAEb3D,MAAK,SAACY,GACLhB,EAAS,CAAEhD,KAAM,gBAAiB+G,OAClC/D,EAASD,UG8Df2G,WHlFwB,SAAC3C,GACzB,OAAO,SAAC/D,GACNE,IACGuG,OADH,UACa3G,EADb,UAC6B,CACzBQ,KAAM,CAAEyD,GAAIA,KAEb3D,MAAK,SAACY,GACLhB,EAAS,CAAEhD,KAAM,cAAe+G,OAChC/D,EAASD,UG2EfY,gBACAmF,YHzIyB,SAACa,EAAO1J,GACjC,8CAAO,WAAO+C,GAAP,SAAAC,EAAA,sEACEC,IACJ0G,MADI,UACK9G,EADL,SACoB6G,GACxBvG,MAAK,WACJJ,EAASD,QAEVQ,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAC9BR,EAAS,CAAEhD,KAAM,eAAgBC,WAP5B,2CAAP,uDGyIAsI,aH/H0B,SAAC,GAAkC,IAAhCR,EAA+B,EAA/BA,aAAcG,EAAiB,EAAjBA,WAC3C,8CAAO,WAAOlF,GAAP,SAAAC,EAAA,sEACCC,IACH0G,MAAM,oDAAqD,CAC1D7B,eACAG,eAED9E,MAAK,WACJJ,EAASD,QAEVQ,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MATzB,2CAAP,wDGuHayC,CAQZ0B,ICpJHkC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUlJ,MAAOA,GACf,kBAAC,GAAD,QAGJmJ,SAASC,eAAe,W","file":"static/js/main.1a8ddacd.chunk.js","sourcesContent":["const initialState = {\r\n  todos: [],\r\n  tasks: [],\r\n};\r\n\r\nconst todo = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"GET_TODOS\":\r\n      return { ...state, todos: action.todos };\r\n    case \"ADD_TASK\":\r\n      return { ...state };\r\n    case \"ADD_COLUMN\":\r\n      return { ...state };\r\n    case \"DELETE_COLUMN\":\r\n      return { ...state };\r\n    case \"DELETE_TASK\":\r\n      return { ...state };\r\n    case \"PATCH_COLUMN\":\r\n      return { ...state, todos: action.order2 };\r\n    case \"CHANGE_COLUMNS\":\r\n      return { ...state };\r\n\r\n    // case \"SEARCH_TASK\":\r\n    //   if (action.val.length) {\r\n    //     let filteredTodos = state.todos.filter((query) => {\r\n    //       return (\r\n    //         query.title.toLowerCase().includes(action.val) ||\r\n    //         query.desc.toLowerCase().includes(action.val)\r\n    //       );\r\n    //     });\r\n    //     return { ...state, filteredTodos };\r\n    //   } else {\r\n    //     return { ...state };\r\n    //   }\r\n    // case \"UPDATE_TODOS\":\r\n    //   let todo = action.todo;\r\n    //   let updatedState = { ...state.todos, [todo.id]: { ...todo } };\r\n    //   return { ...state, todos: updatedState };\r\n    //\r\n    // case \"COMPLETE_TASK\":\r\n    //   state.todos.find((i) => i.id === action.id).isCompleted = !action.value;\r\n    //   return { ...state };\r\n    //\r\n    // case \"STAR_TASK\":\r\n    //   state.todos.find((i) => i.id === action.id).isStarred = !action.value;\r\n    //   return { ...state };\r\n    //\r\n    // case \"IMPORTANT_TASK\":\r\n    //   state.todos.find((i) => i.id === action.id).isImportant = !action.value;\r\n    //   return { ...state };\r\n    //\r\n    // case \"TRASH_TASK\":\r\n    //   state.todos.find((i) => i.id === action.id).isTrashed = true;\r\n    //   return { ...state };\r\n    //\r\n    // case \"UPDATE_LABEL\":\r\n    //   let taskToUpdate = state.todos.find((i) => i.id === action.id).tags;\r\n    //   if (!taskToUpdate.includes(action.label)) taskToUpdate.push(action.label);\r\n    //   else taskToUpdate.splice(taskToUpdate.indexOf(action.label), 1);\r\n    //   return { ...state };\r\n    //\r\n    // case \"UPDATE_TASK\":\r\n    //   let todoToUpdate = state.todos.find((i) => i.id === action.id);\r\n    //   todoToUpdate.title = action.title;\r\n    //   todoToUpdate.desc = action.desc;\r\n    //   return { ...state };\r\n    // case \"CHANGE_FILTER\":\r\n    //   state.routeParam = action.filter;\r\n    //   return { ...state };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todo;\r\n","import { combineReducers } from \"redux\";\r\nimport todo from \"./todo\";\r\n\r\nexport default combineReducers({\r\n  todo,\r\n});\r\n","import { combineReducers } from \"redux\";\r\nimport todoReducer from \"./todo/\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todoApp: todoReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport createDebounce from \"redux-debounced\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers/rootReducer\";\r\n\r\nconst middlewares = [thunk, createDebounce()];\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  rootReducer,\r\n  {},\r\n  composeEnhancers(applyMiddleware(...middlewares))\r\n);\r\n\r\nexport { store };\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nconst Container = styled.div`\r\n    border: none;\r\n    box-shadow:0 0px 5px rgba(127, 126, 126, 0.6),0 0px 0px rgba(0,0,0,0.22);\r\n    border-radius: 3px;\r\n    overflow: hidden;\r\ntext-overflow: ellipsis;\r\n    padding: 8px;\r\n    margin-bottom: 8px;\r\n    background-color: ${props =>\r\n            props.color ?\r\n                props.color : \r\n                'white'};\r\n`;\r\n\r\nexport default class Task extends React.Component {\r\n    render() {\r\n\r\n\r\n        return (\r\n            <Draggable\r\n                draggableId={this.props.task._id}\r\n                index={this.props.index}\r\n            >\r\n                {(provided, snapshot) => (\r\n                    <Container\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        color={this.props.task.color}\r\n                        ref={provided.innerRef}\r\n                        isDragging={snapshot.isDragging}\r\n                    >\r\n                        {this.props.task.name}\r\n                    </Container>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  width: 40px;\r\n  height: 40px;\r\n  background: ${(props) => (props.background ? props.background : \"white\")};\r\n  margin: 0 5px 5px 0;\r\n  border-radius: 5px;\r\n  border: none;\r\n  box-shadow: ${(props) =>\r\n    props.background === props.color ? \"0px 0px 5px\" + props.color : \"none\"};\r\n`;\r\n\r\nclass ColorPicker extends Component {\r\n  state = {\r\n    colors: [\r\n      \"#FF6900\",\r\n      \"#FCB900\",\r\n      \"#7BDCB5\",\r\n      \"#00D084\",\r\n      \"#8ED1FC\",\r\n      \"#0693E3\",\r\n      \"#ABB8C3\",\r\n      \"#EB144C\",\r\n      \"#F78DA7\",\r\n      \"#9900EF\",\r\n    ],\r\n  };\r\n  render() {\r\n    return this.state.colors.map((color) => (\r\n      <Button\r\n        color={this.props.color}\r\n        background={color}\r\n        onClick={(e) => {\r\n          this.props.onChangeComplete(color);\r\n        }}\r\n      />\r\n    ));\r\n  }\r\n}\r\n\r\nexport default ColorPicker;\r\n","import axios from \"axios\";\r\nconst apiURI = \"https://cryptic-beach-01154.herokuapp.com\";\r\nexport const getTodos = () => {\r\n  return async (dispatch) => {\r\n    await axios\r\n      .get(`${apiURI}/todo`)\r\n      .then((result) => {\r\n        dispatch({\r\n          type: \"GET_TODOS\",\r\n          todos: result.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\nexport const patchColumn = (order, order2) => {\r\n  return async (dispatch) => {\r\n    await (axios\r\n      .patch(`${apiURI}/todo`, order)\r\n      .then(() => {\r\n        dispatch(getTodos());\r\n      })\r\n      .catch((err) => console.log(err)),\r\n    dispatch({ type: \"PATCH_COLUMN\", order2 }));\r\n  };\r\n};\r\nexport const patchColumns = ({ sourceColumn, destColumn }) => {\r\n  return async (dispatch) => {\r\n    await axios\r\n      .patch(\"https://cryptic-beach-01154.herokuapp.com/collums\", {\r\n        sourceColumn,\r\n        destColumn,\r\n      })\r\n      .then(() => {\r\n        dispatch(getTodos());\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\nexport const changeColumns = (column) => {\r\n  return async (dispatch) => {\r\n    await axios\r\n      .put(\"https://cryptic-beach-01154.herokuapp.com/collums\", column)\r\n      .then(() => {\r\n        dispatch(getTodos());\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\nexport const addNewTask = (task) => {\r\n  return (dispatch) => {\r\n    axios.post(`${apiURI}/tasks`, task).then((response) => {\r\n      dispatch({ type: \"ADD_TASK\", task });\r\n      dispatch(getTodos());\r\n    });\r\n  };\r\n};\r\n\r\nexport const addNewColumn = (column) => {\r\n  return (dispatch) => {\r\n    axios.post(`${apiURI}/collums`, column).then((response) => {\r\n      dispatch({ type: \"ADD_COLUMN\", column });\r\n      dispatch(getTodos());\r\n    });\r\n  };\r\n};\r\n\r\nexport const deleteTask = (id) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .delete(`${apiURI}/tasks`, {\r\n        data: { id: id },\r\n      })\r\n      .then((response) => {\r\n        dispatch({ type: \"DELETE_TASK\", id });\r\n        dispatch(getTodos());\r\n      });\r\n  };\r\n};\r\nexport const deleteColumn = (id) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .delete(`${apiURI}/collums`, {\r\n        data: { id: id },\r\n      })\r\n      .then((response) => {\r\n        dispatch({ type: \"DELETE_COLUMN\", id });\r\n        dispatch(getTodos());\r\n      });\r\n  };\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport Task from './task.jsx';\r\nimport {BsThreeDots, MdSettings} from \"react-icons/all\";\r\nimport {Button, Dialog, TextInput} from \"evergreen-ui\";\r\nimport {TwitterPicker} from \"react-color\";\r\nimport ColorPicker from \"./colorPicker\";\r\nimport {changeColumns} from \"./redux/actions/todo\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Container = styled.div`\r\n    margin: 8px;\r\n    border: none;\r\n        box-shadow:0 0px 5px rgba(127, 126, 126, 0.6),0 0px 0px rgba(0,0,0,0.22);\r\n\r\n    background: white;\r\n    border-radius: 5px;\r\n    width: 300px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\nconst Title = styled.h3`\r\n    padding: 8px;\r\n`;\r\n\r\nconst Title2 = styled.div`\r\n  margin: 0em 0 0.2em 0;\r\n`;\r\n\r\nconst TaskList = styled.div`\r\n    border-radius: 0 0 5px 5px;\r\n    padding: 8px;\r\n    transition: background-color 0.2s ease;\r\n    background-color: ${props => (props.color ? props.color: 'white')};\r\n    flex-grow: 1;\r\n    height:auto\r\n`;\r\n\r\nconst Item = styled.div`\r\n  margin: 0 0.5em 0.7em 0.5em;\r\n`;\r\nconst Submit = styled.div`\r\n  margin: 0.5em;\r\n  float: right;\r\n`;\r\n\r\n\r\n\r\n\r\n\r\n class Column extends React.Component {\r\n    state={\r\n        activeId:null,\r\n        collum:{name:\"\",color:\"\", _id:\"\"}\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Dialog\r\n                    isShown={this.state.activeId === this.props.column._id}\r\n                    title=\"Edit column\"\r\n                    onCloseComplete={() => this.setState({ activeId: null })}\r\n                    hasFooter={false}\r\n                >\r\n                    <Item>\r\n                        <Title2>Name</Title2>\r\n                        <TextInput\r\n                            onChange={(e) =>\r\n                                this.setState({\r\n                                    collum: { ...this.state.collum, name: e.target.value },\r\n                                })\r\n                            }\r\n                            value={this.state.collum.name}\r\n                        />\r\n                    </Item>\r\n                    <Item>\r\n                        <Title2>Color</Title2>\r\n                        <ColorPicker\r\n                            color={this.state.collum.color}\r\n                            onChangeComplete={(color) =>\r\n                                this.setState({\r\n                                    collum: { ...this.state.collum, color: color },\r\n                                })\r\n                            }\r\n                        />\r\n                    </Item>\r\n                    <Submit>\r\n                        <Button\r\n                            appearance=\"minimal\"\r\n                            intent=\"danger\"\r\n                            onClick={() => {\r\n                                this.props.changeColumns(this.state.collum);\r\n                                this.setState({\r\n                                    activeId: null,\r\n                                    collum: { },\r\n                                });\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                        <Button\r\n                            marginLeft={10}\r\n                            appearance=\"minimal\"\r\n                            intent=\"success\"\r\n                            onClick={() => {\r\n                                this.props.changeColumns(this.state.collum);\r\n                                this.setState({\r\n                                    activeId: null,\r\n                                    collum: { },\r\n                                });\r\n                            }}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n\r\n                    </Submit>\r\n                </Dialog>\r\n            <Draggable\r\n                draggableId={this.props.column._id}\r\n                index={this.props.index} \r\n            >\r\n                {(provided) => (\r\n                    <Container\r\n                        {...provided.draggableProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        <Title {...provided.dragHandleProps}>\r\n                            {this.props.column.name}\r\n                            <BsThreeDots\r\n                                style={{float:\"right\"}}\r\n                                cursor={\"pointer\"}\r\n                                marginLeft={\"1em\"}\r\n                                onClick={() => this.setState({\r\n                                    activeId: this.props.column._id,\r\n                                    collum:{\r\n                                        _id:this.props.column._id,\r\n                                        name:this.props.column.name,\r\n                                        color:this.props.column.color\r\n                                    }\r\n                                })}\r\n                            />\r\n\r\n                        </Title>\r\n                        <Droppable\r\n                            droppableId={this.props.column._id}\r\n                            isDropDisabled={this.props.isDropDisabled}\r\n                            type=\"task\"\r\n                        >\r\n                            {(provided, snapshot) => (\r\n                                <TaskList\r\n                                    ref={provided.innerRef} \r\n                                    {...provided.droppableProps}\r\n                                    isDraggingOver={snapshot.isDraggingOver}\r\n                                    color={this.props.column.color}\r\n                                >\r\n                                    {this.props.column.tasks.map((task ,index) =>\r\n                                    <Task\r\n                                        key={task._id}\r\n                                        task={task}\r\n                                        index={index}\r\n                                    />\r\n                                    )}\r\n\r\n                                    {provided.placeholder}\r\n                                </TaskList>\r\n                            )}\r\n                        </Droppable>\r\n                    </Container>\r\n                )}\r\n            </Draggable>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default connect(null,{changeColumns})(Column)","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { TwitterPicker } from \"react-color\";\r\nimport { Button, Combobox, Dialog, Textarea, TextInput } from \"evergreen-ui\";\r\nimport { addNewTask, addNewColumn } from \"./redux/actions/todo/index\";\r\nimport { connect } from \"react-redux\";\r\nimport ColorPicker from \"./colorPicker\";\r\n\r\nconst Components = styled.div`\r\n  padding: 1em;\r\n  margin: 1em;\r\n`;\r\n\r\nconst Item = styled.div`\r\n  margin: 0 0.5em 0.7em 0.5em;\r\n`;\r\nconst Submit = styled.div`\r\n  margin: 0.5em;\r\n  float: right;\r\n`;\r\nconst Title = styled.div`\r\n  margin: 0em 0 0.2em 0;\r\n`;\r\n\r\nconst Inputs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 50% 50%;\r\n`;\r\n\r\nconst Styles = {\r\n  boxShadow: \"none\",\r\n};\r\n\r\nclass Menu extends Component {\r\n  state = {\r\n    taskIsShown: false,\r\n    columnIsShown: false,\r\n    task: { owner: \"\", name: \"\", color: \"#FFFFFF\", status: false, desk: \"\" },\r\n    collum: { name: \"\", color: \"#FFFFFF\" },\r\n  };\r\n\r\n  render() {\r\n    const comboBoxItems = this.props.todos[0].collums.map((column) => ({\r\n      label: column.name,\r\n      id: column._id,\r\n    }));\r\n    return (\r\n      <Components>\r\n        <Dialog\r\n          isShown={this.state.taskIsShown}\r\n          title=\"Add new task\"\r\n          onCloseComplete={() => this.setState({ taskIsShown: false })}\r\n          hasFooter={false}\r\n        >\r\n          <Inputs>\r\n            <Item>\r\n              <Title>Column</Title>\r\n              <Combobox\r\n                style={Styles}\r\n                width={\"100%\"}\r\n                items={comboBoxItems}\r\n                itemToString={(item) => (item ? item.label : \"\")}\r\n                onChange={(selected) =>\r\n                  this.setState({\r\n                    task: { ...this.state.task, owner: selected.id },\r\n                  })\r\n                }\r\n                placeholder={\"Select the column\"}\r\n              />\r\n            </Item>\r\n            <Item>\r\n              <Title>Name</Title>\r\n              <TextInput\r\n                width={\"100%\"}\r\n                onChange={(e) =>\r\n                  this.setState({\r\n                    task: { ...this.state.task, name: e.target.value },\r\n                  })\r\n                }\r\n                value={this.state.task.name}\r\n                placeholder={\"Enter the task name\"}\r\n              />\r\n            </Item>\r\n          </Inputs>\r\n          <Item>\r\n            <Title>Color</Title>\r\n            <ColorPicker\r\n              color={this.state.task.color}\r\n              onChangeComplete={(color) =>\r\n                this.setState({\r\n                  task: { ...this.state.task, color: color },\r\n                })\r\n              }\r\n            />\r\n          </Item>\r\n          <Item>\r\n            <Title>Description</Title>\r\n            <Textarea\r\n              onChange={(e) =>\r\n                this.setState({\r\n                  task: { ...this.state.task, desk: e.target.value },\r\n                })\r\n              }\r\n              value={this.state.task.desk}\r\n              placeholder=\"Enter the task description\"\r\n            />\r\n          </Item>\r\n\r\n          <Submit>\r\n            <Button\r\n              onClick={() => {\r\n                this.props.addNewTask(this.state.task);\r\n                this.setState({\r\n                  taskIsShown: false,\r\n                  task: { color: \"#FFFFFF\", status: false },\r\n                });\r\n              }}\r\n              disabled={\r\n                this.state.task.owner === \"\" || this.state.task.owner === null\r\n              }\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Submit>\r\n        </Dialog>\r\n\r\n        <Dialog\r\n          isShown={this.state.columnIsShown}\r\n          title=\"Add new column\"\r\n          onCloseComplete={() => this.setState({ columnIsShown: false })}\r\n          hasFooter={false}\r\n        >\r\n          <Item>\r\n            <Title>Name</Title>\r\n            <TextInput\r\n              onChange={(e) =>\r\n                this.setState({\r\n                  collum: { ...this.state.collum, name: e.target.value },\r\n                })\r\n              }\r\n              value={this.state.collum.name}\r\n              placeholder={\"Enter the column name\"}\r\n            />\r\n          </Item>\r\n          <Item>\r\n            <Title>Color</Title>\r\n            <TwitterPicker\r\n              color={this.state.collum.color}\r\n              triangle={\"hide\"}\r\n              onChangeComplete={(color) =>\r\n                this.setState({\r\n                  collum: { ...this.state.collum, color: color.hex },\r\n                })\r\n              }\r\n            />\r\n          </Item>\r\n          <Submit>\r\n            <Button\r\n              onClick={() => {\r\n                this.props.addNewColumn(this.state.collum);\r\n                this.setState({ columnIsShown: false });\r\n              }}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Submit>\r\n        </Dialog>\r\n\r\n        <Button onClick={() => this.setState({ taskIsShown: true })}>\r\n          New task\r\n        </Button>\r\n        <Button\r\n          marginLeft={\"1em\"}\r\n          onClick={() => this.setState({ columnIsShown: true })}\r\n        >\r\n          New column\r\n        </Button>\r\n      </Components>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { addNewTask, addNewColumn })(Menu);\r\n","import React from \"react\";\r\nimport \"@atlaskit/css-reset\";\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\nimport Column from \"./column\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getTodos,\r\n  changeColumns,\r\n  addNewColumn,\r\n  deleteColumn,\r\n  deleteTask,\r\n  patchColumn,\r\n  patchColumns,\r\n} from \"./redux/actions/todo\";\r\nimport Menu from \"./menu\";\r\nimport { Pane } from \"evergreen-ui\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nclass Todo extends React.Component {\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.app.todo.todos !== state.todos) {\r\n      return {\r\n        todos: props.app.todo.todos,\r\n      };\r\n    }\r\n\r\n    // Return null if the state hasn't changed\r\n    return null;\r\n  }\r\n  state = {\r\n    todos: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.props.getTodos();\r\n    this.setState({\r\n      todos: this.props.app.todo.todos,\r\n    });\r\n  }\r\n\r\n  onDragEnd = (result) => {\r\n    const { destination, source, type } = result;\r\n    if (!destination) return;\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (type === \"column\") {\r\n      const newColumnOrder = Array.from(this.state.todos[0].collums);\r\n      newColumnOrder.splice(source.index, 1);\r\n      newColumnOrder.splice(\r\n        destination.index,\r\n        0,\r\n        this.state.todos[0].collums[source.index]\r\n      );\r\n      const newTodos = {\r\n        0: { ...this.state.todos, collums: newColumnOrder },\r\n      };\r\n      this.props.patchColumn(newColumnOrder, newTodos);\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId !== destination.droppableId) {\r\n      const sourceColumn = this.state.todos[0].collums.find(\r\n        (p) => p._id === source.droppableId\r\n      );\r\n      const destColumn = this.state.todos[0].collums.find(\r\n        (p) => p._id === destination.droppableId\r\n      );\r\n      const sourceItems = sourceColumn.tasks;\r\n      const destItems = destColumn.tasks;\r\n      const [removed] = sourceItems.splice(source.index, 1);\r\n      destItems.splice(destination.index, 0, removed);\r\n\r\n      this.props.patchColumns({\r\n        sourceColumn,\r\n        destColumn,\r\n      });\r\n    } else {\r\n      const column = this.state.todos[0].collums.find(\r\n        (p) => p._id === source.droppableId\r\n      );\r\n      const copiedItems = column.tasks;\r\n      const [removed] = copiedItems.splice(source.index, 1);\r\n      copiedItems.splice(destination.index, 0, removed);\r\n\r\n      this.props.changeColumns(column);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return this.state.todos !== null && this.state.todos.length !== 0 ? (\r\n      <React.Fragment>\r\n        <Menu todos={this.state.todos} />\r\n        <Pane\r\n          display=\"flex\"\r\n          margin={\"1em\"}\r\n          minHeight={\"70vh\"}\r\n          width={\"100%-2em\"}\r\n          overflow={\"auto\"}\r\n        >\r\n          <DragDropContext\r\n            onDragEnd={this.onDragEnd}\r\n            // onDragStart={this.onDragStart}\r\n          >\r\n            <Droppable\r\n              droppableId=\"all-columns\"\r\n              direction=\"horizontal\"\r\n              type=\"column\"\r\n            >\r\n              {(provided) => (\r\n                <Container ref={provided.innerRef} {...provided.droppableProps}>\r\n                  {this.state.todos[0].collums.map((columnId, index) => {\r\n                    const column = columnId;\r\n                    return (\r\n                      <Column\r\n                        key={column._id}\r\n                        column={column}\r\n                        tasks={column.tasks}\r\n                        index={index}\r\n                      />\r\n                    );\r\n                  })}\r\n                  {provided.placeholder}\r\n                </Container>\r\n              )}\r\n            </Droppable>\r\n          </DragDropContext>\r\n        </Pane>\r\n      </React.Fragment>\r\n    ) : null;\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    app: state.todoApp,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, {\r\n  getTodos,\r\n  addNewColumn,\r\n  deleteColumn,\r\n  deleteTask,\r\n  changeColumns,\r\n  patchColumn,\r\n  patchColumns,\r\n})(Todo);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/storeConfig/store\";\r\nimport Todo from \"./todo\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Todo />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}