{"version":3,"sources":["redux/reducers/todo/todo.js","redux/reducers/todo/index.js","redux/reducers/rootReducer.js","redux/storeConfig/store.js","task.jsx","column.jsx","redux/actions/todo/index.js","menu.js","todo.js","index.js"],"names":["initialState","todos","tasks","todo","state","action","type","order2","combineReducers","rootReducer","todoApp","todoReducer","middlewares","thunk","createDebounce","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","Container","styled","div","props","color","Task","console","log","this","task","draggableId","_id","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","isDragging","name","React","Component","Title","h3","TaskList","Column","column","droppableId","isDropDisabled","droppableProps","isDraggingOver","map","key","placeholder","apiURI","getTodos","dispatch","a","axios","get","then","result","data","catch","err","addNewColumn","post","response","Components","Item","Submit","Menu","taskIsShown","columnIsShown","owner","status","desk","collum","comboBoxItems","collums","label","id","Dialog","isShown","title","onCloseComplete","setState","hasFooter","Combobox","items","itemToString","item","onChange","selected","TextInput","e","target","value","Textarea","triangle","onChangeComplete","hex","Button","onClick","addNewTask","marginLeft","connect","Todo","onDragEnd","destination","source","sourceColumn","find","p","destColumn","sourceItems","destItems","splice","removed","patchColumns","copiedItems","changeColumns","newColumnOrder","Array","from","newTodos","0","patchColumn","app","length","Fragment","Pane","display","padding","margin","background","borderRadius","width","overflow","direction","columnId","deleteColumn","delete","deleteTask","put","order","patch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82f90644.chunk.js","sourcesContent":["const initialState = {\r\n  todos: [],\r\n  tasks: [],\r\n};\r\n\r\nconst todo = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"GET_TODOS\":\r\n      return { ...state, todos: action.todos };\r\n    case \"ADD_TASK\":\r\n      return { ...state };\r\n    case \"ADD_COLUMN\":\r\n      return { ...state };\r\n    case \"DELETE_COLUMN\":\r\n      return { ...state };\r\n    case \"DELETE_TASK\":\r\n      return { ...state };\r\n    case \"PATCH_COLUMN\":\r\n      return { ...state, todos: action.order2 };\r\n    case \"CHANGE_COLUMNS\":\r\n      return { ...state };\r\n\r\n    // case \"SEARCH_TASK\":\r\n    //   if (action.val.length) {\r\n    //     let filteredTodos = state.todos.filter((query) => {\r\n    //       return (\r\n    //         query.title.toLowerCase().includes(action.val) ||\r\n    //         query.desc.toLowerCase().includes(action.val)\r\n    //       );\r\n    //     });\r\n    //     return { ...state, filteredTodos };\r\n    //   } else {\r\n    //     return { ...state };\r\n    //   }\r\n    // case \"UPDATE_TODOS\":\r\n    //   let todo = action.todo;\r\n    //   let updatedState = { ...state.todos, [todo.id]: { ...todo } };\r\n    //   return { ...state, todos: updatedState };\r\n    //\r\n    // case \"COMPLETE_TASK\":\r\n    //   state.todos.find((i) => i.id === action.id).isCompleted = !action.value;\r\n    //   return { ...state };\r\n    //\r\n    // case \"STAR_TASK\":\r\n    //   state.todos.find((i) => i.id === action.id).isStarred = !action.value;\r\n    //   return { ...state };\r\n    //\r\n    // case \"IMPORTANT_TASK\":\r\n    //   state.todos.find((i) => i.id === action.id).isImportant = !action.value;\r\n    //   return { ...state };\r\n    //\r\n    // case \"TRASH_TASK\":\r\n    //   state.todos.find((i) => i.id === action.id).isTrashed = true;\r\n    //   return { ...state };\r\n    //\r\n    // case \"UPDATE_LABEL\":\r\n    //   let taskToUpdate = state.todos.find((i) => i.id === action.id).tags;\r\n    //   if (!taskToUpdate.includes(action.label)) taskToUpdate.push(action.label);\r\n    //   else taskToUpdate.splice(taskToUpdate.indexOf(action.label), 1);\r\n    //   return { ...state };\r\n    //\r\n    // case \"UPDATE_TASK\":\r\n    //   let todoToUpdate = state.todos.find((i) => i.id === action.id);\r\n    //   todoToUpdate.title = action.title;\r\n    //   todoToUpdate.desc = action.desc;\r\n    //   return { ...state };\r\n    // case \"CHANGE_FILTER\":\r\n    //   state.routeParam = action.filter;\r\n    //   return { ...state };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todo;\r\n","import { combineReducers } from \"redux\";\r\nimport todo from \"./todo\";\r\n\r\nexport default combineReducers({\r\n  todo,\r\n});\r\n","import { combineReducers } from \"redux\";\r\nimport todoReducer from \"./todo/\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todoApp: todoReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport createDebounce from \"redux-debounced\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers/rootReducer\";\r\n\r\nconst middlewares = [thunk, createDebounce()];\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  rootReducer,\r\n  {},\r\n  composeEnhancers(applyMiddleware(...middlewares))\r\n);\r\n\r\nexport { store };\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nconst Container = styled.div`\r\n    border: 1px solid lightgrey;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\ntext-overflow: ellipsis;\r\n    padding: 8px;\r\n    margin-bottom: 8px;\r\n    background-color: ${props =>\r\n            props.color ?\r\n                props.color : \r\n                'white'};\r\n`;\r\n\r\nexport default class Task extends React.Component {\r\n    render() {\r\n        console.log(this.props.task.color)\r\n\r\n\r\n        return (\r\n            <Draggable\r\n                draggableId={this.props.task._id}\r\n                index={this.props.index}\r\n            >\r\n                {(provided, snapshot) => (\r\n                    <Container\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        color={this.props.task.color}\r\n                        ref={provided.innerRef}\r\n                        isDragging={snapshot.isDragging}\r\n                    >\r\n                        {this.props.task.name}\r\n                    </Container>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport Task from './task.jsx';\r\n\r\nconst Container = styled.div`\r\n    margin: 8px;\r\n    border: 1px solid lightgrey;\r\n    background-color: white;\r\n    border-radius: 2px;\r\n    min-width: 250px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\nconst Title = styled.h3`\r\n    padding: 8px;\r\n`;\r\nconst TaskList = styled.div`\r\n    padding: 8px;\r\n    transition: background-color 0.2s ease;\r\n    background-color: ${props => (props.color ? props.color: 'white')};\r\n    flex-grow: 1;\r\n    min-height: 100px;\r\n`;\r\n\r\n\r\n\r\nexport default class Column extends React.Component {\r\n    render() {\r\n        return (\r\n            <Draggable\r\n                draggableId={this.props.column._id}\r\n                index={this.props.index} \r\n            >\r\n                {(provided) => (\r\n                    <Container\r\n                        {...provided.draggableProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        <Title {...provided.dragHandleProps}>\r\n                            {this.props.column.name}\r\n                        </Title>\r\n                        <Droppable\r\n                            droppableId={this.props.column._id}\r\n                            isDropDisabled={this.props.isDropDisabled}\r\n                            type=\"task\"\r\n                        >\r\n                            {(provided, snapshot) => (\r\n                                <TaskList\r\n                                    ref={provided.innerRef} \r\n                                    {...provided.droppableProps}\r\n                                    isDraggingOver={snapshot.isDraggingOver}\r\n                                    color={this.props.column.color}\r\n                                >\r\n                                    {this.props.column.tasks.map((task ,index) =>\r\n                                    <Task\r\n                                        key={task._id}\r\n                                        task={task}\r\n                                        index={index}\r\n                                    />\r\n                                    )}\r\n\r\n                                    {provided.placeholder}\r\n                                </TaskList>\r\n                            )}\r\n                        </Droppable>\r\n                    </Container>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}","import axios from \"axios\";\r\nconst apiURI = \"https://cryptic-beach-01154.herokuapp.com\";\r\nexport const getTodos = () => {\r\n  return async (dispatch) => {\r\n    await axios\r\n      .get(`${apiURI}/todo`)\r\n      .then((result) => {\r\n        dispatch({\r\n          type: \"GET_TODOS\",\r\n          todos: result.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\nexport const patchColumn = (order, order2) => {\r\n  return async (dispatch) => {\r\n    await (axios\r\n      .patch(`${apiURI}/todo`, order)\r\n      .then(() => {\r\n        dispatch(getTodos());\r\n      })\r\n      .catch((err) => console.log(err)),\r\n    dispatch({ type: \"PATCH_COLUMN\", order2 }));\r\n  };\r\n};\r\nexport const patchColumns = ({ sourceColumn, destColumn }) => {\r\n  return async (dispatch) => {\r\n    await axios\r\n      .patch(`${apiURI}/collums`, {\r\n        sourceColumn,\r\n        destColumn,\r\n      })\r\n      .then(() => {\r\n        dispatch(getTodos());\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\nexport const changeColumns = (column) => {\r\n  return async (dispatch) => {\r\n    await axios\r\n      .put(`${apiURI}/collums`, column)\r\n      .then(() => {\r\n        dispatch(getTodos());\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\nexport const addNewTask = (task) => {\r\n  return (dispatch) => {\r\n    axios.post(`${apiURI}/tasks`, task).then((response) => {\r\n      dispatch({ type: \"ADD_TASK\", task });\r\n      dispatch(getTodos());\r\n    });\r\n  };\r\n};\r\n\r\nexport const addNewColumn = (column) => {\r\n  return (dispatch) => {\r\n    axios.post(`${apiURI}/collums`, column).then((response) => {\r\n      dispatch({ type: \"ADD_COLUMN\", column });\r\n      dispatch(getTodos());\r\n    });\r\n  };\r\n};\r\n\r\nexport const deleteTask = (id) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .delete(`${apiURI}/tasks`, {\r\n        data: { id: id },\r\n      })\r\n      .then((response) => {\r\n        dispatch({ type: \"DELETE_TASK\", id });\r\n        dispatch(getTodos());\r\n      });\r\n  };\r\n};\r\nexport const deleteColumn = (id) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .delete(`${apiURI}/collums`, {\r\n        data: { id: id },\r\n      })\r\n      .then((response) => {\r\n        dispatch({ type: \"DELETE_COLUMN\", id });\r\n        dispatch(getTodos());\r\n      });\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { TwitterPicker } from \"react-color\";\r\nimport { Button, Combobox, Dialog, Textarea, TextInput } from \"evergreen-ui\";\r\nimport { addNewTask, addNewColumn } from \"./redux/actions/todo/index\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Components = styled.div`\r\n  padding: 1em;\r\n  margin: 1em;\r\n`;\r\n\r\nconst Item = styled.div`\r\n  margin: 0 0.5em 1em 0.5em;\r\n`;\r\nconst Submit = styled.div`\r\n  margin: 0.5em;\r\n  float: right;\r\n`;\r\nconst Title = styled.div`\r\n  margin: 0em 0 0.2em 0;\r\n`;\r\n\r\nclass Menu extends Component {\r\n  state = {\r\n    taskIsShown: false,\r\n    columnIsShown: false,\r\n    task: { owner: \"\", name: \"\", color: \"#FFFFFF\", status: false, desk: \"\" },\r\n    collum: { name: \"\", color: \"#FFFFFF\" },\r\n  };\r\n\r\n  render() {\r\n    const comboBoxItems = this.props.todos[0].collums.map((column) => ({\r\n      label: column.name,\r\n      id: column._id,\r\n    }));\r\n    return (\r\n      <Components>\r\n        <Dialog\r\n          isShown={this.state.taskIsShown}\r\n          title=\"Add new task\"\r\n          onCloseComplete={() => this.setState({ taskIsShown: false })}\r\n          hasFooter={false}\r\n        >\r\n          <Item>\r\n            <Title>Column</Title>\r\n            <Combobox\r\n              items={comboBoxItems}\r\n              itemToString={(item) => (item ? item.label : \"\")}\r\n              onChange={(selected) =>\r\n                this.setState({\r\n                  task: { ...this.state.task, owner: selected.id },\r\n                })\r\n              }\r\n              placeholder={\"Select the column\"}\r\n            />\r\n          </Item>\r\n          <Item>\r\n            <Title>Name</Title>\r\n            <TextInput\r\n              onChange={(e) =>\r\n                this.setState({\r\n                  task: { ...this.state.task, name: e.target.value },\r\n                })\r\n              }\r\n              value={this.state.task.name}\r\n              placeholder={\"Enter the task name\"}\r\n            />\r\n          </Item>\r\n          <Item>\r\n            <Title>Description</Title>\r\n            <Textarea\r\n              onChange={(e) =>\r\n                this.setState({\r\n                  task: { ...this.state.task, desk: e.target.value },\r\n                })\r\n              }\r\n              value={this.state.task.desk}\r\n              placeholder=\"Enter the task description\"\r\n            />\r\n          </Item>\r\n          <Item>\r\n            <Title>Color</Title>\r\n            <TwitterPicker\r\n              color={this.state.task.color}\r\n              triangle={\"hide\"}\r\n              onChangeComplete={(color) =>\r\n                this.setState({\r\n                  task: { ...this.state.task, color: color.hex },\r\n                })\r\n              }\r\n            />\r\n          </Item>\r\n          <Submit>\r\n            <Button\r\n              onClick={() => {\r\n                this.props.addNewTask(this.state.task);\r\n                this.setState({ taskIsShown: false });\r\n              }}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Submit>\r\n        </Dialog>\r\n\r\n        <Dialog\r\n          isShown={this.state.columnIsShown}\r\n          title=\"Add new column\"\r\n          onCloseComplete={() => this.setState({ columnIsShown: false })}\r\n          hasFooter={false}\r\n        >\r\n          <Item>\r\n            <Title>Name</Title>\r\n            <TextInput\r\n              onChange={(e) =>\r\n                this.setState({\r\n                  collum: { ...this.state.collum, name: e.target.value },\r\n                })\r\n              }\r\n              value={this.state.collum.name}\r\n              placeholder={\"Enter the column name\"}\r\n            />\r\n          </Item>\r\n          <Item>\r\n            <Title>Color</Title>\r\n            <TwitterPicker\r\n              color={this.state.collum.color}\r\n              triangle={\"hide\"}\r\n              onChangeComplete={(color) =>\r\n                this.setState({\r\n                  collum: { ...this.state.collum, color: color.hex },\r\n                })\r\n              }\r\n            />\r\n          </Item>\r\n          <Submit>\r\n            <Button\r\n              onClick={() => {\r\n                this.props.addNewColumn(this.state.collum);\r\n                this.setState({ columnIsShown: false });\r\n              }}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Submit>\r\n        </Dialog>\r\n\r\n        <Button onClick={() => this.setState({ taskIsShown: true })}>\r\n          New task\r\n        </Button>\r\n        <Button\r\n          marginLeft={\"1em\"}\r\n          onClick={() => this.setState({ columnIsShown: true })}\r\n        >\r\n          New column\r\n        </Button>\r\n      </Components>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { addNewTask, addNewColumn })(Menu);\r\n","import React from \"react\";\r\nimport \"@atlaskit/css-reset\";\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\nimport Column from \"./column\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getTodos,\r\n  changeColumns,\r\n  addNewColumn,\r\n  deleteColumn,\r\n  deleteTask,\r\n  patchColumn,\r\n  patchColumns,\r\n} from \"./redux/actions/todo\";\r\nimport Menu from \"./menu\";\r\nimport { Pane } from \"evergreen-ui\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nclass Todo extends React.Component {\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.app.todo.todos !== state.todos) {\r\n      return {\r\n        todos: props.app.todo.todos,\r\n      };\r\n    }\r\n\r\n    // Return null if the state hasn't changed\r\n    return null;\r\n  }\r\n  state = {\r\n    todos: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.props.getTodos();\r\n    this.setState({\r\n      todos: this.props.app.todo.todos,\r\n    });\r\n  }\r\n\r\n  onDragEnd = (result) => {\r\n    const { destination, source, type } = result;\r\n    if (!destination) return;\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (type === \"column\") {\r\n      const newColumnOrder = Array.from(this.state.todos[0].collums);\r\n      newColumnOrder.splice(source.index, 1);\r\n      newColumnOrder.splice(\r\n        destination.index,\r\n        0,\r\n        this.state.todos[0].collums[source.index]\r\n      );\r\n      const newTodos = {\r\n        0: { ...this.state.todos, collums: newColumnOrder },\r\n      };\r\n      this.props.patchColumn(newColumnOrder, newTodos);\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId !== destination.droppableId) {\r\n      const sourceColumn = this.state.todos[0].collums.find(\r\n        (p) => p._id === source.droppableId\r\n      );\r\n      const destColumn = this.state.todos[0].collums.find(\r\n        (p) => p._id === destination.droppableId\r\n      );\r\n      const sourceItems = sourceColumn.tasks;\r\n      const destItems = destColumn.tasks;\r\n      const [removed] = sourceItems.splice(source.index, 1);\r\n      destItems.splice(destination.index, 0, removed);\r\n\r\n      this.props.patchColumns({\r\n        sourceColumn,\r\n        destColumn,\r\n      });\r\n    } else {\r\n      const column = this.state.todos[0].collums.find(\r\n        (p) => p._id === source.droppableId\r\n      );\r\n      const copiedItems = column.tasks;\r\n      const [removed] = copiedItems.splice(source.index, 1);\r\n      copiedItems.splice(destination.index, 0, removed);\r\n\r\n      this.props.changeColumns(column);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return this.state.todos !== null && this.state.todos.length !== 0 ? (\r\n      <React.Fragment>\r\n        <Menu todos={this.state.todos} />\r\n        <Pane\r\n          display=\"flex\"\r\n          padding={\"1em\"}\r\n          margin={\"1em\"}\r\n          background=\"tint2\"\r\n          borderRadius={3}\r\n          width={\"100%-2em\"}\r\n          overflow={\"auto\"}\r\n        >\r\n          <DragDropContext\r\n            onDragEnd={this.onDragEnd}\r\n            // onDragStart={this.onDragStart}\r\n          >\r\n            <Droppable\r\n              droppableId=\"all-columns\"\r\n              direction=\"horizontal\"\r\n              type=\"column\"\r\n            >\r\n              {(provided) => (\r\n                <Container ref={provided.innerRef} {...provided.droppableProps}>\r\n                  {this.state.todos[0].collums.map((columnId, index) => {\r\n                    const column = columnId;\r\n                    return (\r\n                      <Column\r\n                        key={column._id}\r\n                        column={column}\r\n                        tasks={column.tasks}\r\n                        index={index}\r\n                      />\r\n                    );\r\n                  })}\r\n                  {provided.placeholder}\r\n                </Container>\r\n              )}\r\n            </Droppable>\r\n          </DragDropContext>\r\n        </Pane>\r\n      </React.Fragment>\r\n    ) : null;\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    app: state.todoApp,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, {\r\n  getTodos,\r\n  addNewColumn,\r\n  deleteColumn,\r\n  deleteTask,\r\n  changeColumns,\r\n  patchColumn,\r\n  patchColumns,\r\n})(Todo);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/storeConfig/store\";\r\nimport Todo from \"./todo\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Todo />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}